!<arch>
0-isupper.c/    0           0     0     644     237       `
#include "holberton.h"

/**
 * _isupper - checks for uppercase letter
 * Return: 1 if c is upper, 0 otherwise.
 * @c: int parameter to be checked.
 */
int _isupper(int c)

{
	if (c >= 65 && c <= 90)

		return (1);
	else
		return (0);

}

0-memset.c/     0           0     0     644     315       `
#include "holberton.h"

/**
 * _memset - fills memory with a constant byte.
 * @s: pointer to a string.
 * @b: constant byte.
 * @n: unsigned integer resembles bytes.
 * Return: Character.
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;


	for (i = 0; i < n; i++)
		s[i] = b;

	return (s);
}

0-strcat.c/     0           0     0     644     381       `
#include "holberton.h"

/**
 * *_strcat - concatenates two strings
 * @dest: src string is appended here.
 * @src: string to be appended to destination.
 * Return: pointer to string "dest".
 */

char *_strcat(char *dest, char *src)
{
	int i = 0;
	int j = 0;

	while (dest[i] != '\0')
	{
		i++;
	}

	while (src[j] != '\0')
	{
		dest[i] = src[j];
		j++;
		i++;
	}

	return (dest);
}

100-atoi.c/     0           0     0     644     141       `
#include "holberton.h"

/**
 * _atoi - atoi function for holberton.
 * @s: pointer to string.
 * Return: integer
 */

int _atoi(char *s)
{
}

1-isdigit.c/    0           0     0     644     233       `
#include "holberton.h"

/**
 * _isdigit - checks for digit ) 0 - 9
 * Return: 1 if c is digit, 0 otherwise.
 * @c: int parameter for _isdigit()
 */

int _isdigit(int c)
{
	if (c >= 48 && c <= 57)

		return (1);
	else
		return (0);
}

1-memcpy.c/     0           0     0     644     380       `
#include "holberton.h"

/**
 * _memcpy - function copies memory area.
 * @dest: pointer to destination memory area.
 * @src: pointer to source area.
 * @n: number of bytes to be copied from src to dest.
 * Return: pointer to dest.
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}

	return (dest);

}
1-strncat.c/    0           0     0     644     444       `
#include "holberton.h"
/**
 * _strncat - function concat two strings with n bytes from src.
 * @dest: destination.
 * @src: source string.
 * @n: max byte count from source to concat.
 * Return: pointer to resulting string.
 */

char *_strncat(char *dest, char *src, int n)
{
	int i = 0;
	int j = 0;



	while (dest[i] != '\0')
	{
		i++;
	}

	while (src[j] != src[n] && src[j] != '\0')
	{
		dest[i] = src[j];
		j++;
		i++;
	}
	return (dest);
}
2-strchr.c/     0           0     0     644     302       `
#include "holberton.h"

/**
 * _strchr - locates a character in string.
 * @s: pointer to a string 's'.
 * @c: character in a string.
 * Return: pointer to first occurence of 'c' in 's' or NULL.
 */

char *_strchr(char *s, char c)
{

	while (*s++)
	{

		if (*s == c)
			return (s);
	}

	return (0);

}
2-strlen.c/     0           0     0     644     216       `
#include "holberton.h"
#include <stdio.h>

/**
 * _strlen - length of string (array).
 * @s: string to be measured.
 * Return: 0.
 */

int _strlen(char *s)
{
	int i = 0;

	while (s[i] != '\0')
		i++;

	return (i);
}
2-strncpy.c/    0           0     0     644     409       `
#include "holberton.h"

/**
 * *_strncpy - function copies a string.
 * @dest: pointer to destination.
 * @src: pointer to src.
 * @n: n bytes.
 * Return: pointer to resulting string.
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i = 0;

	while (src[i] != '\0' || i < n)
	{
		if (src[i] != '\0' && i < n)
		{
			dest[i] = src[i];
		}
		else
		{
			dest[i] = '\0';
		}

		i++;
	}

	return (dest);
}

3-islower.c/    0           0     0     644     221       `
#include "holberton.h"

/**
 * _islower - checks for lowercase character
 *
 * Return: Always 1
 * @c: parameter for _islower
 */

int _islower(int c)

{
	if (c >= 97 && c <= 122)


		return (1);


	else
		return (0);

}

3-puts.c/       0           0     0     644     224       `
#include "holberton.h"

/**
 * _puts - prints a string
 * @str: string to be printed
 * Return: nothing.
 */

void _puts(char *str)
{
	int i = 0;

	while (str[i] != '\0')
	{
		_putchar(str[i]);
		i++;

	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     370       `
#include "holberton.h"

/**
 * _strcmp - compare two strings.
 * @s1: pointer to string 1.
 * @s2: pointer to string 2.
 * Return: -1, 1, 0.
 */

int _strcmp(char *s1, char *s2)
{
	int i = 0;
	int j = 0;

	while (s1[i])
	{
		i++;
	}

	while (s2[j])
	{
		j++;
	}

	if (s1 < s2)
	{
		return (-15);
	}

	else if (s1 > s2)
	{
		return (15);
	}

	else
	{
		return (0);
	}

}
3-strspn.c/     0           0     0     644     397       `
#include "holberton.h"

/**
 * _strspn - gets length of a prefix substring.
 * @s: pointer to a string.
 * @accept: determines bytes to be returned.
 * Return: unsigned int.
 */

unsigned int _strspn(char *s, char *accept)
{
	int i = 0;
	int j = 0;
	int k = 0;

	for (i = 0; s[i] != ','; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
				k++;
		}

	}

	return (k);
}

4-isalpha.c/    0           0     0     644     244       `
#include "holberton.h"

/**
 * _isalpha - checks for alphabetic character
 *
 * Return: Always 1.
 * @c: parameter for _isalpha
 */

int _isalpha(int c)
{
	if ((c >= 97 && c <= 122) || (c >= 65 && c <= 90))

		return (1);
	else
		return (0);
}
4-strpbrk.c/    0           0     0     644     387       `
#include "holberton.h"

/**
 * _strpbrk - locates first occuences in s of bytes in accept.
 * @s: string to be evaluated.
 * @accept: contains bytes to be located in s.
 * Return: Character 's'.
 */

char *_strpbrk(char *s, char *accept)
{
	int j = 0;

	while (*s++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (*s == accept[j])
			{
				return (s);
			}

		}

	}

	return (0);
}

5-strstr.c/     0           0     0     644     499       `
#include "holberton.h"

/**
 * _strstr - function locates a substring.
 * @haystack: pointer to string.
 * @needle: pointer to substring.
 * Return: pointer to beginning of located substring.
 */

char *_strstr(char *haystack, char *needle)
{

	while (*haystack++)
	{
		char *begin = haystack;
		char *pattern =	needle;

		while (*haystack && *pattern && *haystack == *pattern)
		{
			haystack++;
			pattern++;
		}

		if (!*pattern)

			return (begin);

		haystack = begin + 1;


	}
		return (0);
}

6-abs.c/        0           0     0     644     232       `
#include "holberton.h"

/**
 * _abs - Computes absolute value of an integer
 * @n: number for absolute
 * Return: Always 0.
 */
int _abs(int n)

{

	int mag = n * -1;

	if (n < 0)
	{
		return (mag);

	}

	else
	{
		return (n);
	}
}
9-strcpy.c/     0           0     0     644     222       `
#include "holberton.h"

/**
 * _strcpy - copies source string to destination.
 * @dest: pointer to destination string.
 * @src: pointer to source string.
 * Return: Character.
 */

char *_strcpy(char *dest, char *src)
{
}
main.c/         0           0     0     644     154       `
#include "holberton.h"

int main(void)
{

    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     0           0     0     644     270       `
#include <unistd.h>
#include "holberton.h"

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}
